9/21/15
git checkout -> return the file to the last submit
__name__ shows modulo name when imported



9/22/15
source activate to activate the enviroment

pip install flask
pip freeze -> shows python libraries

from flask inport Flask
only imports Flask
ex) from random import randrange

127.0.0.1 only allows local machine



9/25/15
.gitignore
when you check git status, files in gitignore will not show up

{{<variable name>}} in html template
return render_template("<page>", <variablename> = <value>) in the python file

d = {}
d['one'] = 'hello'
d['two'] = 12312
d[3] = 'abcdefg'

d2 = {'last':'T', 'first':'Mr.', 'title':'Fool Pitier'}
d.keys returns [3,'two','one']

9/28/15
static folder -> files that do not change

9/29/15
cookies sent as header back from server
browser sends the cookies back to the server everytime you request something from the website

10/1/15
shelves are like dictionaries but they can store information in a .dat file
shelves can be accessed by multiple processes at the same time.

10/2/15
student info
transcript
schedule
attendance

teacher info
schedule
roster

10/5/15
Relational Database

Structured Query Language SQL

Oracle
Sybase
IBM DBL

10/6/15
postgresql -> had transactions
mysql -> no transactions
sqlite

sqlite 3
.open doughnutstore.db
.databases
.tables
CREATE TABLE doughnuts (name text, price real, qty integer);
.schema doughnuts
INSERT INTO doughnuts VALUES ("jelly",2.50,10);
.dump
DROP TABLE doughnuts;
.read doughnuts.sql

SELECT * FROM doughnuts;
SELECT name,qty FROM doughnuts;
SELECT * FROM doughnuts WHERE name = 'coconuts';
SELECT * FROM doughnuts WHERE name like "c%";

10/7/15

select people.name from people, doughnuts;
matches every person to every doughnut

<and> keyword

databases in sql usually use btree
wide trees instead of tall trees

10/8/15

comma seperated values

placeholders

import csv

c = conn.cursor()
q = "<sql command>"
c.execute(q)

conn.commit()
saves the changes in the file

make string commands in python for sql run, use execi

tuple is immutable list



10/19/15
from flask import g

in "base.html":
{% block head %}
this is my head
{% endblock head %}

in other .html files:
{% extends "base.html" %}

can replace parts of base:
{% block head %}
this is a new head
{% endblock head %}

grabs in another file:
{% include "includedstuff.html" %}

from flask import Markup
l = """
  <html code>
"""
l = Markup(l)

jinja:
{{list|safe}}
filters as safe

10/20/15

NoSQL -> any non-SQL database

Mongodb
stored on server
collections instead of tables
documents instead of records

mongo api

11/12/15
Readme
Changes - github commit history
Makefile
Todo - github issues
dir structure
file name

11/16/15
get query - who what when
search for pages with those words
extract text
find all the names
simple stats

11/17/15
import re

expression = "[0-9]{3}-[0-9]{3}-[0-9]{4}"
return re.findall(expression.s)

===============================================================================

2/3/16

Aim: Canvassing the area.

HTML5!
   Redesign of HTML with a focus on making the more "modern" features of web browsers easy to work with.
   Design around javascript and a standardized DOM
   Includes built-in support for audio and video playback
   Includes an element that can be directly drawn on

Document Model Object
   Model that organizes the components of a web page as a tree
   Provides an API to access the elements of a webpage via programming languages like javascript
   
Canvas
   HTML5 element that provides a drawing area
   Javascript functions can draw onto a canvas element.
      You must declare what context you are drawing in. For example 2d drawing, 3d drawing, raw bitmap rendering...
   Basic canvas operation:
      HTML
         <canvas height="500" width="500" id="slate">
	 </canvas>
      javascript
         var c = document.getElementById("slate");
	 var ctx = c.getContext("2d");
	 ctx.fillStyle = "#ff0000";
	 ctx.fillRect(50,50,100,200);

===============================================================================

2/4/16

ctx.beginPath();
ctx.arc(x,y,radius,starting angle,end angle); //circles clockwise
ctx.fill();
ctx.stroke();

var clear = function(e) {
    e.preventDefault();
    ctx.clearRect(0,0,500,500);
}

var drawDot = function(e) {
    e.preventDefault();
    ctx.beginPath();
    ctx.arc(e.offsetX, e.offsetY, 10, 0, 2 * Math.PI);
}

===============================================================================

2/9/16

Aim: Your path to success starts here!

javascript path functions
   Paths are used to draw arbitrary shapes, including circles and curves
   A context can keep track of one path at a time
   The path is not drawn until stroke() is called
   A path is considered done when a new beingPath() is called
   
   beginPath()
      Starts of resets the current path
   moveTo(x,y)
      Moves the path to position (x,y), does not result in a line or a filled-in section
   lineTo(x,y)
      Moves the path to position (x,y), will result in a line and a filled-in section
   closePath()
      Results in a line from the current position to the starting position
      The path can be continued after
   stroke()
      Renders all the lines in the path, does not end the path   
   fill()
      Fills the interior of the path, will not work if the path has fewer than 3 points in it
   quadraticCurveTo(x,y,x,y)

================================================================================

2/23/16

Aim: Let's Get Animated

requestAnimationFrame tells the browser to run a specified function before drawing the next frame.
The browser will attempt to run ~60 frames per second
It lets the browser handle when the code should be executed (as opposed to setInterval which is based on specific times). It also lets the browser pause the animation when a page is not in the foreground.

id = window.requestAnimationFrame(<FUNCTION>);
window.cancelAnimationFrame(id);

================================================================================

2/25/16

Aim: What's your vector victor?

XML
   eXtensible Markup Language
   It is not a formatting language (like HTML)
   A framework for creating markup based grammars
   Uses some of the syntatic standards of HTML, like tags and attributes, with a focus on storing and representing data instead of rendering and displaying it.
   An XML namespace is defined by the tags and attributes associated with a specific XML language.
   
SVG
   Scalable Vector Graphics
   SVG is a specific XML based vector graphics format.
   Vector graphics are images that are not represented as a 2d grid of pixels (raster) but instead as a list of drawing commands (like line, circle, rectangle, curve, ...).
   Biggest advantage to vector graphics is that they are scalable to any size without resulting in pixelation.
   the <svg> element is designed to store SVG code (that is, SVG XML elements)
   
   <svg xmlns="http://www.w3.org/2000/svg">
      SVG CODE
   </svg>
   
  xmlns
     Attribute that identifies the namespace for the specific XML language being used
  
================================================================================

2/29/16

Aim: Tipping of the scales of vectors

Creating SVG elements in javascript
   document.createElementNS( <NAMESPACE IDENTIFIER>, <ELEMENT>);
      Creates an element from a specified XML namespace
      svg example:
         var c1 = document.createElementNS("http://www.w3.org/2000/svg", "circle");
      Once created, you can modify it with setAttribute calls
         cl.setAttribute("cx", "200");
      To add the element to your svg container, use the appendChild function
         var pic = document.getElementById("svgid");
	 pic.appendChild(c);
      To remove svg elements, you can either:
      	 pic.removeChild(c);
	 c1.remove();
   Animations with svg and javascript
      The canvas will animate methods do not work on avg
      Here we will have to use setInterval
         setInterval(<FUNCTION>, <TIME>)
      To stop an animation use clearInterval
         clearInterval(<ID>)

================================================================================

3/1/16

